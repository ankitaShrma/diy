'use strict';
<<<<<<< HEAD
const url = require('url');
const got = require('got');
const registryUrl = require('registry-url');
const registryAuthToken = require('registry-auth-token');
const semver = require('semver');

module.exports = (name, opts) => {
	const scope = name.split('/')[0];
	const regUrl = registryUrl(scope);
	const pkgUrl = url.resolve(regUrl, encodeURIComponent(name).replace(/^%40/, '@'));
	const authInfo = registryAuthToken(regUrl, {recursive: true});

	opts = Object.assign({
		version: 'latest'
	}, opts);

	const headers = {
		accept: 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'
	};

	if (opts.fullMetadata) {
		delete headers.accept;
	}

	if (authInfo) {
		headers.authorization = `${authInfo.type} ${authInfo.token}`;
	}

	return got(pkgUrl, {json: true, headers})
		.then(res => {
			let data = res.body;
			let version = opts.version;

			if (opts.allVersions) {
				return data;
			}

			if (data['dist-tags'][version]) {
				data = data.versions[data['dist-tags'][version]];
			} else if (version) {
				if (!data.versions[version]) {
					const versions = Object.keys(data.versions);
					version = semver.maxSatisfying(versions, version);

					if (!version) {
						throw new Error('Version doesn\'t exist');
					}
				}

				data = data.versions[version];

				if (!data) {
					throw new Error('Version doesn\'t exist');
				}
			}

			return data;
		})
		.catch(err => {
			if (err.statusCode === 404) {
				throw new Error(`Package \`${name}\` doesn't exist`);
			}

			throw err;
		});
=======
var got = require('got');
var registryUrl = require('registry-url');

function get(url, cb) {
	got(url, {json: true}, function (err, data) {
		if (err && err.code === 404) {
			cb(new Error('Package or version doesn\'t exist'));
			return;
		}

		if (err) {
			cb(err);
			return;
		}

		cb(null, data);
	});
}

module.exports = function (name, version, cb) {
	var url = registryUrl(name.split('/')[0]) + name + '/';

	if (typeof version !== 'string') {
		cb = version;
		version = '';
	}

	get(url + version, cb);
};

module.exports.field = function (name, field, cb) {
	var url = registryUrl(name.split('/')[0]) +
		'-/by-field/?key=%22' + name + '%22&field=' + field;

	get(url, function (err, res) {
		if (err) {
			cb(err);
			return;
		}

		if (Object.keys(res).length === 0) {
			cb(new Error('Field `' + field + '` doesn\'t exist'));
			return;
		}

		cb(null, res[name][field]);
	});
>>>>>>> ec8051100d234fe9175dcd73a88d8192aa153d52
};
